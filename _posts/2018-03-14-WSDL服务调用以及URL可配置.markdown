---
layout: post
title: WebServiceClient URL 可配置
date: 2018-03-14 00:00:00 +0300
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: how-to-start.jpg # Add image post (optional)
tags: [JAVA, Software] # add tag
---
在实际项目开发过程中，经常性需要调用第三方提供的接口，WebService接口就是比较常见的一种。
最近笔者也遇到了调用第三方的webservice接口的情况，那么接下来就跟大家分享一下的使用过程以及如何实现URL可配置化。   

首先，我们需要拿到第三方接口服务路径。通常会提供一个链接，如下：
>http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?WSDL    
   
在拿到这个链接地址后，我们可以通过`wsimport` 在dos窗口生产服务调用所需源码。
不过笔者直接使用`IntelliJ IDEA `编辑器中的插件生成源码，这里就不对`wsimport`使用进行介绍了。如下是笔者通过`IntelliJ IDEA `生成源码的过程。

* 先找到我们源码生成的位置，右键选择WebServices->Generate Java Code From Wsdl,如下图所示   
![Macbook]({{site.baseurl}}/assets/img/wsdl1.jpg)
* 然后我们输入我们wsdl地址，生成源码。生成源码的同事会生成class文件以及wsdl文件，无特殊用途可直接删除。具体如下图所示  
![Macbook]({{site.baseurl}}/assets/img/wsdl2.jpg)
* 生成源码之后，调用代码如下   

>//创建服务视图
WeatherWebService weatherWebService = new WeatherWebService();  
//通过服务视图得到服务端点
WeatherWebServiceSoap weatherWebServiceSoap = weatherWebService.getWeatherWebServiceSoap();  
//调用webservice服务方法
ArrayOfString arrayOfString = weatherWebServiceSoap.getWeatherbyCityName("宁波");    

* 由于不同环境下wsdl地址不同，因此笔者需要做到wsdl文件可配置化。笔者浏览了一下生成的元源码，在其中一个service类中找到了线索。生成的服务类提供了多种有参构造器，其中就包含了传入Url的有参构造器。因此笔者就可以通过不同环境配置拿到不同WSDL服务地址，不需要去修改代码。实现代码如下：    

>URL url = new URL("http://www.webxml.com.cn/WebServices/WeatherWebService.asmx");  
//创建service
Service service = Service.create(url);  
//创建porttype
WeatherWebService weatherWebService = service.getPort(WeatherWebService.class);  
//通过服务视图得到服务端点
WeatherWebServiceSoap weatherWebServiceSoap = weatherWebService.getWeatherWebServiceSoap();  
//调用webservice服务方法
ArrayOfString arrayOfString = weatherWebServiceSoap.getWeatherbyCityName("郑州");     

其中创建URL对象时，传入的URL串笔者是通过`@Value`注解拿到配置文件中的值并传入。

以上就是笔者使用`WebService` 调用第三方接口的全过程。如有不足，欢迎指正。






